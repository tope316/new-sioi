{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\ReactJS\\\\new-sioi\\\\components\\\\misc\\\\films.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from \"react\";\nimport { MenuItem } from \"@blueprintjs/core\";\n\n/** Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top */\nexport const TOP_100_FILMS = [{\n  title: \"The Shawshank Redemption\",\n  year: 1994\n}, {\n  title: \"The Godfather\",\n  year: 1972\n}, {\n  title: \"The Godfather: Part II\",\n  year: 1974\n}, {\n  title: \"The Dark Knight\",\n  year: 2008\n}, {\n  title: \"12 Angry Men\",\n  year: 1957\n}, {\n  title: \"Schindler's List\",\n  year: 1993\n}, {\n  title: \"Pulp Fiction\",\n  year: 1994\n}, {\n  title: \"The Lord of the Rings: The Return of the King\",\n  year: 2003\n}, {\n  title: \"The Good, the Bad and the Ugly\",\n  year: 1966\n}, {\n  title: \"Fight Club\",\n  year: 1999\n}, {\n  title: \"The Lord of the Rings: The Fellowship of the Ring\",\n  year: 2001\n}, {\n  title: \"Star Wars: Episode V - The Empire Strikes Back\",\n  year: 1980\n}, {\n  title: \"Forrest Gump\",\n  year: 1994\n}, {\n  title: \"Inception\",\n  year: 2010\n}, {\n  title: \"The Lord of the Rings: The Two Towers\",\n  year: 2002\n}, {\n  title: \"One Flew Over the Cuckoo's Nest\",\n  year: 1975\n}, {\n  title: \"Goodfellas\",\n  year: 1990\n}, {\n  title: \"The Matrix\",\n  year: 1999\n}, {\n  title: \"Seven Samurai\",\n  year: 1954\n}, {\n  title: \"Star Wars: Episode IV - A New Hope\",\n  year: 1977\n}, {\n  title: \"City of God\",\n  year: 2002\n}, {\n  title: \"Se7en\",\n  year: 1995\n}, {\n  title: \"The Silence of the Lambs\",\n  year: 1991\n}, {\n  title: \"It's a Wonderful Life\",\n  year: 1946\n}, {\n  title: \"Life Is Beautiful\",\n  year: 1997\n}, {\n  title: \"The Usual Suspects\",\n  year: 1995\n}, {\n  title: \"Léon: The Professional\",\n  year: 1994\n}, {\n  title: \"Spirited Away\",\n  year: 2001\n}, {\n  title: \"Saving Private Ryan\",\n  year: 1998\n}, {\n  title: \"Once Upon a Time in the West\",\n  year: 1968\n}, {\n  title: \"American History X\",\n  year: 1998\n}, {\n  title: \"Interstellar\",\n  year: 2014\n}, {\n  title: \"Casablanca\",\n  year: 1942\n}, {\n  title: \"City Lights\",\n  year: 1931\n}, {\n  title: \"Psycho\",\n  year: 1960\n}, {\n  title: \"The Green Mile\",\n  year: 1999\n}, {\n  title: \"The Intouchables\",\n  year: 2011\n}, {\n  title: \"Modern Times\",\n  year: 1936\n}, {\n  title: \"Raiders of the Lost Ark\",\n  year: 1981\n}, {\n  title: \"Rear Window\",\n  year: 1954\n}, {\n  title: \"The Pianist\",\n  year: 2002\n}, {\n  title: \"The Departed\",\n  year: 2006\n}, {\n  title: \"Terminator 2: Judgment Day\",\n  year: 1991\n}, {\n  title: \"Back to the Future\",\n  year: 1985\n}, {\n  title: \"Whiplash\",\n  year: 2014\n}, {\n  title: \"Gladiator\",\n  year: 2000\n}, {\n  title: \"Memento\",\n  year: 2000\n}, {\n  title: \"The Prestige\",\n  year: 2006\n}, {\n  title: \"The Lion King\",\n  year: 1994\n}, {\n  title: \"Apocalypse Now\",\n  year: 1979\n}, {\n  title: \"Alien\",\n  year: 1979\n}, {\n  title: \"Sunset Boulevard\",\n  year: 1950\n}, {\n  title: \"Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb\",\n  year: 1964\n}, {\n  title: \"The Great Dictator\",\n  year: 1940\n}, {\n  title: \"Cinema Paradiso\",\n  year: 1988\n}, {\n  title: \"The Lives of Others\",\n  year: 2006\n}, {\n  title: \"Grave of the Fireflies\",\n  year: 1988\n}, {\n  title: \"Paths of Glory\",\n  year: 1957\n}, {\n  title: \"Django Unchained\",\n  year: 2012\n}, {\n  title: \"The Shining\",\n  year: 1980\n}, {\n  title: \"WALL·E\",\n  year: 2008\n}, {\n  title: \"American Beauty\",\n  year: 1999\n}, {\n  title: \"The Dark Knight Rises\",\n  year: 2012\n}, {\n  title: \"Princess Mononoke\",\n  year: 1997\n}, {\n  title: \"Aliens\",\n  year: 1986\n}, {\n  title: \"Oldboy\",\n  year: 2003\n}, {\n  title: \"Once Upon a Time in America\",\n  year: 1984\n}, {\n  title: \"Witness for the Prosecution\",\n  year: 1957\n}, {\n  title: \"Das Boot\",\n  year: 1981\n}, {\n  title: \"Citizen Kane\",\n  year: 1941\n}, {\n  title: \"North by Northwest\",\n  year: 1959\n}, {\n  title: \"Vertigo\",\n  year: 1958\n}, {\n  title: \"Star Wars: Episode VI - Return of the Jedi\",\n  year: 1983\n}, {\n  title: \"Reservoir Dogs\",\n  year: 1992\n}, {\n  title: \"Braveheart\",\n  year: 1995\n}, {\n  title: \"M\",\n  year: 1931\n}, {\n  title: \"Requiem for a Dream\",\n  year: 2000\n}, {\n  title: \"Amélie\",\n  year: 2001\n}, {\n  title: \"A Clockwork Orange\",\n  year: 1971\n}, {\n  title: \"Like Stars on Earth\",\n  year: 2007\n}, {\n  title: \"Taxi Driver\",\n  year: 1976\n}, {\n  title: \"Lawrence of Arabia\",\n  year: 1962\n}, {\n  title: \"Double Indemnity\",\n  year: 1944\n}, {\n  title: \"Eternal Sunshine of the Spotless Mind\",\n  year: 2004\n}, {\n  title: \"Amadeus\",\n  year: 1984\n}, {\n  title: \"To Kill a Mockingbird\",\n  year: 1962\n}, {\n  title: \"Toy Story 3\",\n  year: 2010\n}, {\n  title: \"Logan\",\n  year: 2017\n}, {\n  title: \"Full Metal Jacket\",\n  year: 1987\n}, {\n  title: \"Dangal\",\n  year: 2016\n}, {\n  title: \"The Sting\",\n  year: 1973\n}, {\n  title: \"2001: A Space Odyssey\",\n  year: 1968\n}, {\n  title: \"Singin' in the Rain\",\n  year: 1952\n}, {\n  title: \"Toy Story\",\n  year: 1995\n}, {\n  title: \"Bicycle Thieves\",\n  year: 1948\n}, {\n  title: \"The Kid\",\n  year: 1921\n}, {\n  title: \"Inglourious Basterds\",\n  year: 2009\n}, {\n  title: \"Snatch\",\n  year: 2000\n}, {\n  title: \"3 Idiots\",\n  year: 2009\n}, {\n  title: \"Monty Python and the Holy Grail\",\n  year: 1975\n}].map((m, index) => _objectSpread(_objectSpread({}, m), {}, {\n  rank: index + 1\n}));\nexport const renderFilm = (film, {\n  handleClick,\n  modifiers,\n  query\n}) => {\n  if (!modifiers.matchesPredicate) {\n    return null;\n  }\n\n  const text = `${film.rank}. ${film.title}`;\n  return /*#__PURE__*/_jsxDEV(MenuItem, {\n    active: modifiers.active,\n    disabled: modifiers.disabled,\n    label: film.year.toString(),\n    onClick: handleClick,\n    text: highlightText(text, query)\n  }, film.rank, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 9\n  }, this);\n};\nexport const renderCreateFilmOption = (query, active, handleClick) => /*#__PURE__*/_jsxDEV(MenuItem, {\n  icon: \"add\",\n  text: `Create \"${query}\"`,\n  active: active,\n  onClick: handleClick,\n  shouldDismissPopover: false\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 141,\n  columnNumber: 5\n}, this);\nexport const filterFilm = (query, film, _index, exactMatch) => {\n  const normalizedTitle = film.title.toLowerCase();\n  const normalizedQuery = query.toLowerCase();\n\n  if (exactMatch) {\n    return normalizedTitle === normalizedQuery;\n  } else {\n    return `${film.rank}. ${normalizedTitle} ${film.year}`.indexOf(normalizedQuery) >= 0;\n  }\n};\n\nfunction highlightText(text, query) {\n  let lastIndex = 0;\n  const words = query.split(/\\s+/).filter(word => word.length > 0).map(escapeRegExpChars);\n\n  if (words.length === 0) {\n    return [text];\n  }\n\n  const regexp = new RegExp(words.join(\"|\"), \"gi\");\n  const tokens = [];\n\n  while (true) {\n    const match = regexp.exec(text);\n\n    if (!match) {\n      break;\n    }\n\n    const length = match[0].length;\n    const before = text.slice(lastIndex, regexp.lastIndex - length);\n\n    if (before.length > 0) {\n      tokens.push(before);\n    }\n\n    lastIndex = regexp.lastIndex;\n    tokens.push( /*#__PURE__*/_jsxDEV(\"strong\", {\n      children: match[0]\n    }, lastIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 21\n    }, this));\n  }\n\n  const rest = text.slice(lastIndex);\n\n  if (rest.length > 0) {\n    tokens.push(rest);\n  }\n\n  return tokens;\n}\n\nfunction escapeRegExpChars(text) {\n  return text.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, \"\\\\$1\");\n}\n\nexport const filmSelectProps = {\n  itemPredicate: filterFilm,\n  itemRenderer: renderFilm,\n  items: TOP_100_FILMS\n};\nexport function createFilm(title) {\n  return {\n    rank: 100 + Math.floor(Math.random() * 100 + 1),\n    title,\n    year: new Date().getFullYear()\n  };\n}\nexport function areFilmsEqual(filmA, filmB) {\n  // Compare only the titles (ignoring case) just for simplicity.\n  return filmA.title.toLowerCase() === filmB.title.toLowerCase();\n}\nexport function doesFilmEqualQuery(film, query) {\n  return film.title.toLowerCase() === query.toLowerCase();\n}\nexport function arrayContainsFilm(films, filmToFind) {\n  return films.some(film => film.title === filmToFind.title);\n}\nexport function addFilmToArray(films, filmToAdd) {\n  return [...films, filmToAdd];\n}\nexport function deleteFilmFromArray(films, filmToDelete) {\n  return films.filter(film => film !== filmToDelete);\n}\nexport function maybeAddCreatedFilmToArrays(items, createdItems, film) {\n  const isNewlyCreatedItem = !arrayContainsFilm(items, film);\n  return {\n    createdItems: isNewlyCreatedItem ? addFilmToArray(createdItems, film) : createdItems,\n    // Add a created film to `items` so that the film can be deselected.\n    items: isNewlyCreatedItem ? addFilmToArray(items, film) : items\n  };\n}\nexport function maybeDeleteCreatedFilmFromArrays(items, createdItems, film) {\n  const wasItemCreatedByUser = arrayContainsFilm(createdItems, film); // Delete the item if the user manually created it.\n\n  return {\n    createdItems: wasItemCreatedByUser ? deleteFilmFromArray(createdItems, film) : createdItems,\n    items: wasItemCreatedByUser ? deleteFilmFromArray(items, film) : items\n  };\n}","map":{"version":3,"sources":["D:/ReactJS/new-sioi/components/misc/films.tsx"],"names":["React","MenuItem","TOP_100_FILMS","title","year","map","m","index","rank","renderFilm","film","handleClick","modifiers","query","matchesPredicate","text","active","disabled","toString","highlightText","renderCreateFilmOption","filterFilm","_index","exactMatch","normalizedTitle","toLowerCase","normalizedQuery","indexOf","lastIndex","words","split","filter","word","length","escapeRegExpChars","regexp","RegExp","join","tokens","match","exec","before","slice","push","rest","replace","filmSelectProps","itemPredicate","itemRenderer","items","createFilm","Math","floor","random","Date","getFullYear","areFilmsEqual","filmA","filmB","doesFilmEqualQuery","arrayContainsFilm","films","filmToFind","some","addFilmToArray","filmToAdd","deleteFilmFromArray","filmToDelete","maybeAddCreatedFilmToArrays","createdItems","isNewlyCreatedItem","maybeDeleteCreatedFilmFromArrays","wasItemCreatedByUser"],"mappings":"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","sourcesContent":["import * as React from \"react\"\n\nimport { MenuItem } from \"@blueprintjs/core\"\nimport { ItemPredicate, ItemRenderer } from \"@blueprintjs/select\"\n\nexport interface IFilm {\n    /** Title of film. */\n    title: string;\n    /** Release year. */\n    year: number;\n    /** IMDb ranking. */\n    rank: number;\n}\n\n/** Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top */\nexport const TOP_100_FILMS: IFilm[] = [\n    { title: \"The Shawshank Redemption\", year: 1994 },\n    { title: \"The Godfather\", year: 1972 },\n    { title: \"The Godfather: Part II\", year: 1974 },\n    { title: \"The Dark Knight\", year: 2008 },\n    { title: \"12 Angry Men\", year: 1957 },\n    { title: \"Schindler's List\", year: 1993 },\n    { title: \"Pulp Fiction\", year: 1994 },\n    { title: \"The Lord of the Rings: The Return of the King\", year: 2003 },\n    { title: \"The Good, the Bad and the Ugly\", year: 1966 },\n    { title: \"Fight Club\", year: 1999 },\n    { title: \"The Lord of the Rings: The Fellowship of the Ring\", year: 2001 },\n    { title: \"Star Wars: Episode V - The Empire Strikes Back\", year: 1980 },\n    { title: \"Forrest Gump\", year: 1994 },\n    { title: \"Inception\", year: 2010 },\n    { title: \"The Lord of the Rings: The Two Towers\", year: 2002 },\n    { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n    { title: \"Goodfellas\", year: 1990 },\n    { title: \"The Matrix\", year: 1999 },\n    { title: \"Seven Samurai\", year: 1954 },\n    { title: \"Star Wars: Episode IV - A New Hope\", year: 1977 },\n    { title: \"City of God\", year: 2002 },\n    { title: \"Se7en\", year: 1995 },\n    { title: \"The Silence of the Lambs\", year: 1991 },\n    { title: \"It's a Wonderful Life\", year: 1946 },\n    { title: \"Life Is Beautiful\", year: 1997 },\n    { title: \"The Usual Suspects\", year: 1995 },\n    { title: \"Léon: The Professional\", year: 1994 },\n    { title: \"Spirited Away\", year: 2001 },\n    { title: \"Saving Private Ryan\", year: 1998 },\n    { title: \"Once Upon a Time in the West\", year: 1968 },\n    { title: \"American History X\", year: 1998 },\n    { title: \"Interstellar\", year: 2014 },\n    { title: \"Casablanca\", year: 1942 },\n    { title: \"City Lights\", year: 1931 },\n    { title: \"Psycho\", year: 1960 },\n    { title: \"The Green Mile\", year: 1999 },\n    { title: \"The Intouchables\", year: 2011 },\n    { title: \"Modern Times\", year: 1936 },\n    { title: \"Raiders of the Lost Ark\", year: 1981 },\n    { title: \"Rear Window\", year: 1954 },\n    { title: \"The Pianist\", year: 2002 },\n    { title: \"The Departed\", year: 2006 },\n    { title: \"Terminator 2: Judgment Day\", year: 1991 },\n    { title: \"Back to the Future\", year: 1985 },\n    { title: \"Whiplash\", year: 2014 },\n    { title: \"Gladiator\", year: 2000 },\n    { title: \"Memento\", year: 2000 },\n    { title: \"The Prestige\", year: 2006 },\n    { title: \"The Lion King\", year: 1994 },\n    { title: \"Apocalypse Now\", year: 1979 },\n    { title: \"Alien\", year: 1979 },\n    { title: \"Sunset Boulevard\", year: 1950 },\n    { title: \"Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb\", year: 1964 },\n    { title: \"The Great Dictator\", year: 1940 },\n    { title: \"Cinema Paradiso\", year: 1988 },\n    { title: \"The Lives of Others\", year: 2006 },\n    { title: \"Grave of the Fireflies\", year: 1988 },\n    { title: \"Paths of Glory\", year: 1957 },\n    { title: \"Django Unchained\", year: 2012 },\n    { title: \"The Shining\", year: 1980 },\n    { title: \"WALL·E\", year: 2008 },\n    { title: \"American Beauty\", year: 1999 },\n    { title: \"The Dark Knight Rises\", year: 2012 },\n    { title: \"Princess Mononoke\", year: 1997 },\n    { title: \"Aliens\", year: 1986 },\n    { title: \"Oldboy\", year: 2003 },\n    { title: \"Once Upon a Time in America\", year: 1984 },\n    { title: \"Witness for the Prosecution\", year: 1957 },\n    { title: \"Das Boot\", year: 1981 },\n    { title: \"Citizen Kane\", year: 1941 },\n    { title: \"North by Northwest\", year: 1959 },\n    { title: \"Vertigo\", year: 1958 },\n    { title: \"Star Wars: Episode VI - Return of the Jedi\", year: 1983 },\n    { title: \"Reservoir Dogs\", year: 1992 },\n    { title: \"Braveheart\", year: 1995 },\n    { title: \"M\", year: 1931 },\n    { title: \"Requiem for a Dream\", year: 2000 },\n    { title: \"Amélie\", year: 2001 },\n    { title: \"A Clockwork Orange\", year: 1971 },\n    { title: \"Like Stars on Earth\", year: 2007 },\n    { title: \"Taxi Driver\", year: 1976 },\n    { title: \"Lawrence of Arabia\", year: 1962 },\n    { title: \"Double Indemnity\", year: 1944 },\n    { title: \"Eternal Sunshine of the Spotless Mind\", year: 2004 },\n    { title: \"Amadeus\", year: 1984 },\n    { title: \"To Kill a Mockingbird\", year: 1962 },\n    { title: \"Toy Story 3\", year: 2010 },\n    { title: \"Logan\", year: 2017 },\n    { title: \"Full Metal Jacket\", year: 1987 },\n    { title: \"Dangal\", year: 2016 },\n    { title: \"The Sting\", year: 1973 },\n    { title: \"2001: A Space Odyssey\", year: 1968 },\n    { title: \"Singin' in the Rain\", year: 1952 },\n    { title: \"Toy Story\", year: 1995 },\n    { title: \"Bicycle Thieves\", year: 1948 },\n    { title: \"The Kid\", year: 1921 },\n    { title: \"Inglourious Basterds\", year: 2009 },\n    { title: \"Snatch\", year: 2000 },\n    { title: \"3 Idiots\", year: 2009 },\n    { title: \"Monty Python and the Holy Grail\", year: 1975 },\n].map((m, index) => ({ ...m, rank: index + 1 }))\n\nexport const renderFilm: ItemRenderer<IFilm> = (film, { handleClick, modifiers, query }) => {\n    if (!modifiers.matchesPredicate) {\n        return null;\n    }\n    const text = `${film.rank}. ${film.title}`;\n    return (\n        <MenuItem\n            active={modifiers.active}\n            disabled={modifiers.disabled}\n            label={film.year.toString()}\n            key={film.rank}\n            onClick={handleClick}\n            text={highlightText(text, query)}\n        />\n    )\n}\n\nexport const renderCreateFilmOption = (\n    query: string,\n    active: boolean,\n    handleClick: React.MouseEventHandler<HTMLElement>,\n) => (\n    <MenuItem\n        icon=\"add\"\n        text={`Create \"${query}\"`}\n        active={active}\n        onClick={handleClick}\n        shouldDismissPopover={false}\n    />\n);\n\nexport const filterFilm: ItemPredicate<IFilm> = (query, film, _index, exactMatch) => {\n    const normalizedTitle = film.title.toLowerCase();\n    const normalizedQuery = query.toLowerCase();\n\n    if (exactMatch) {\n        return normalizedTitle === normalizedQuery;\n    } else {\n        return `${film.rank}. ${normalizedTitle} ${film.year}`.indexOf(normalizedQuery) >= 0;\n    }\n};\n\nfunction highlightText(text: string, query: string) {\n    let lastIndex = 0;\n    const words = query\n        .split(/\\s+/)\n        .filter(word => word.length > 0)\n        .map(escapeRegExpChars);\n    if (words.length === 0) {\n        return [text];\n    }\n    const regexp = new RegExp(words.join(\"|\"), \"gi\");\n    const tokens: React.ReactNode[] = [];\n    while (true) {\n        const match = regexp.exec(text);\n        if (!match) {\n            break;\n        }\n        const length = match[0].length;\n        const before = text.slice(lastIndex, regexp.lastIndex - length);\n        if (before.length > 0) {\n            tokens.push(before);\n        }\n        lastIndex = regexp.lastIndex;\n        tokens.push(<strong key={lastIndex}>{match[0]}</strong>);\n    }\n    const rest = text.slice(lastIndex);\n    if (rest.length > 0) {\n        tokens.push(rest);\n    }\n    return tokens;\n}\n\nfunction escapeRegExpChars(text: string) {\n    return text.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, \"\\\\$1\");\n}\n\nexport const filmSelectProps = {\n    itemPredicate: filterFilm,\n    itemRenderer: renderFilm,\n    items: TOP_100_FILMS,\n};\n\nexport function createFilm(title: string): IFilm {\n    return {\n        rank: 100 + Math.floor(Math.random() * 100 + 1),\n        title,\n        year: new Date().getFullYear(),\n    };\n}\n\nexport function areFilmsEqual(filmA: IFilm, filmB: IFilm) {\n    // Compare only the titles (ignoring case) just for simplicity.\n    return filmA.title.toLowerCase() === filmB.title.toLowerCase();\n}\n\nexport function doesFilmEqualQuery(film: IFilm, query: string) {\n    return film.title.toLowerCase() === query.toLowerCase();\n}\n\nexport function arrayContainsFilm(films: IFilm[], filmToFind: IFilm): boolean {\n    return films.some((film: IFilm) => film.title === filmToFind.title);\n}\n\nexport function addFilmToArray(films: IFilm[], filmToAdd: IFilm) {\n    return [...films, filmToAdd];\n}\n\nexport function deleteFilmFromArray(films: IFilm[], filmToDelete: IFilm) {\n    return films.filter(film => film !== filmToDelete);\n}\n\nexport function maybeAddCreatedFilmToArrays(\n    items: IFilm[],\n    createdItems: IFilm[],\n    film: IFilm,\n): { createdItems: IFilm[]; items: IFilm[] } {\n    const isNewlyCreatedItem = !arrayContainsFilm(items, film);\n    return {\n        createdItems: isNewlyCreatedItem ? addFilmToArray(createdItems, film) : createdItems,\n        // Add a created film to `items` so that the film can be deselected.\n        items: isNewlyCreatedItem ? addFilmToArray(items, film) : items,\n    };\n}\n\nexport function maybeDeleteCreatedFilmFromArrays(\n    items: IFilm[],\n    createdItems: IFilm[],\n    film: IFilm,\n): { createdItems: IFilm[]; items: IFilm[] } {\n    const wasItemCreatedByUser = arrayContainsFilm(createdItems, film);\n\n    // Delete the item if the user manually created it.\n    return {\n        createdItems: wasItemCreatedByUser ? deleteFilmFromArray(createdItems, film) : createdItems,\n        items: wasItemCreatedByUser ? deleteFilmFromArray(items, film) : items,\n    };\n}"]},"metadata":{},"sourceType":"module"}