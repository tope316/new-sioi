{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\ReactJS\\\\new-sioi\\\\components\\\\vendor\\\\Table.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from \"react\";\nimport { useTable, useFilters } from \"react-table\";\nimport styles from './Table.module.css';\nexport default function Table({\n  columns,\n  data\n}) {\n  const {\n    0: filterInput,\n    1: setFilterInput\n  } = useState(\"\");\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    setFilter // The useFilter Hook provides a way to set the filter\n\n  } = useTable({\n    columns,\n    data\n  }, useFilters // Adding the useFilters Hook to the table\n  ); // Update the state when input changes\n\n  const handleFilterChange = e => {\n    const value = e.target.value || undefined;\n    setFilter(\"Company\", value); // Update the Company filter. Now our table will filter and show only the rows which have a matching value\n\n    setFilterInput(value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      value: filterInput,\n      onChange: handleFilterChange,\n      placeholder: \"Search...\",\n      className: styles.myinput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this), \"\\xA0\\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"a\", {\n      className: styles.badge,\n      href: \"./new\",\n      children: \"Add New\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", _objectSpread(_objectSpread({\n      className: styles.mytable\n    }, getTableProps()), {}, {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", _objectSpread(_objectSpread({}, headerGroup.getHeaderGroupProps()), {}, {\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", _objectSpread(_objectSpread({}, column.getHeaderProps()), {}, {\n            children: column.render(\"Header\")\n          }), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 29\n          }, this))\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", _objectSpread(_objectSpread({}, getTableBodyProps()), {}, {\n        children: rows.map((row, i) => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", _objectSpread(_objectSpread({}, row.getRowProps()), {}, {\n            children: row.cells.map(cell => {\n              return /*#__PURE__*/_jsxDEV(\"td\", _objectSpread(_objectSpread({}, cell.getCellProps()), {}, {\n                children: cell.render(\"Cell\")\n              }), void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 40\n              }, this);\n            })\n          }), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 25\n          }, this);\n        })\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this)]\n    }), void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}","map":{"version":3,"sources":["D:/ReactJS/new-sioi/components/vendor/Table.tsx"],"names":["React","useState","useTable","useFilters","styles","Table","columns","data","filterInput","setFilterInput","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setFilter","handleFilterChange","e","value","target","undefined","myinput","badge","mytable","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,aAArC;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AAEA,eAAe,SAASC,KAAT,CAAe;AAACC,EAAAA,OAAD;AAAUC,EAAAA;AAAV,CAAf,EAAgC;AAE3C,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCR,QAAQ,CAAC,EAAD,CAA9C;AAEA,QAAM;AACFS,IAAAA,aADE;AAEFC,IAAAA,iBAFE;AAGFC,IAAAA,YAHE;AAIFC,IAAAA,IAJE;AAKFC,IAAAA,UALE;AAMFC,IAAAA,SANE,CAMQ;;AANR,MAOFb,QAAQ,CACR;AACII,IAAAA,OADJ;AAEIC,IAAAA;AAFJ,GADQ,EAKRJ,UALQ,CAKG;AALH,GAPZ,CAJ2C,CAmB3C;;AACA,QAAMa,kBAAkB,GAAGC,CAAC,IAAI;AAC5B,UAAMC,KAAK,GAAGD,CAAC,CAACE,MAAF,CAASD,KAAT,IAAkBE,SAAhC;AACAL,IAAAA,SAAS,CAAC,SAAD,EAAYG,KAAZ,CAAT,CAF4B,CAEC;;AAC7BT,IAAAA,cAAc,CAACS,KAAD,CAAd;AACH,GAJD;;AAMA,sBACI;AAAA,4BACA;AACI,MAAA,KAAK,EAAEV,WADX;AAEI,MAAA,QAAQ,EAAEQ,kBAFd;AAGI,MAAA,WAAW,EAAE,WAHjB;AAII,MAAA,SAAS,EAAEZ,MAAM,CAACiB;AAJtB;AAAA;AAAA;AAAA;AAAA,YADA,+BAQkB;AAAG,MAAA,SAAS,EAAEjB,MAAM,CAACkB,KAArB;AAA4B,MAAA,IAAI,EAAC,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARlB,eAUA;AAAO,MAAA,SAAS,EAAElB,MAAM,CAACmB;AAAzB,OAAsCb,aAAa,EAAnD;AAAA,8BACI;AAAA,kBACKE,YAAY,CAACY,GAAb,CAAiBC,WAAW,iBACzB,8CAAQA,WAAW,CAACC,mBAAZ,EAAR;AAAA,oBACKD,WAAW,CAACE,OAAZ,CAAoBH,GAApB,CAAwBI,MAAM,iBAC3B,8CAAQA,MAAM,CAACC,cAAP,EAAR;AAAA,sBACKD,MAAM,CAACE,MAAP,CAAc,QAAd;AADL;AAAA;AAAA;AAAA;AAAA,kBADH;AADL;AAAA;AAAA;AAAA;AAAA,gBADH;AADL;AAAA;AAAA;AAAA;AAAA,cADJ,eAYI,iDAAWnB,iBAAiB,EAA5B;AAAA,kBACKE,IAAI,CAACW,GAAL,CAAS,CAACO,GAAD,EAAMC,CAAN,KAAY;AAClBlB,UAAAA,UAAU,CAACiB,GAAD,CAAV;AACA,8BACI,8CAAQA,GAAG,CAACE,WAAJ,EAAR;AAAA,sBACKF,GAAG,CAACG,KAAJ,CAAUV,GAAV,CAAcW,IAAI,IAAI;AACnB,kCAAO,8CAAQA,IAAI,CAACC,YAAL,EAAR;AAAA,0BACFD,IAAI,CAACL,MAAL,CAAY,MAAZ;AADE;AAAA;AAAA;AAAA;AAAA,sBAAP;AAGH,aAJA;AADL;AAAA;AAAA;AAAA;AAAA,kBADJ;AASH,SAXA;AADL;AAAA;AAAA;AAAA;AAAA,cAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAVA;AAAA,kBADJ;AAyCH","sourcesContent":["import React, {useState} from \"react\";\nimport { useTable, useFilters } from \"react-table\";\nimport styles from './Table.module.css'\n\nexport default function Table({columns, data}) {\n\n    const [filterInput, setFilterInput] = useState(\"\");\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n        setFilter // The useFilter Hook provides a way to set the filter\n    } = useTable(\n        {\n            columns, \n            data\n        },\n        useFilters // Adding the useFilters Hook to the table\n    );\n\n    // Update the state when input changes\n    const handleFilterChange = e => {\n        const value = e.target.value || undefined;\n        setFilter(\"Company\", value); // Update the Company filter. Now our table will filter and show only the rows which have a matching value\n        setFilterInput(value);\n    };\n\n    return (\n        <>\n        <input\n            value={filterInput}\n            onChange={handleFilterChange}\n            placeholder={\"Search...\"}\n            className={styles.myinput}\n        />\n\n        &nbsp;&nbsp;&nbsp;<a className={styles.badge} href=\"./new\">Add New</a>\n\n        <table className={styles.mytable} {...getTableProps()}>\n            <thead>\n                {headerGroups.map(headerGroup => (\n                    <tr {...headerGroup.getHeaderGroupProps()}>\n                        {headerGroup.headers.map(column => (\n                            <th {...column.getHeaderProps()}>\n                                {column.render(\"Header\")}\n                            </th>\n                        ))}\n                    </tr>\n                ))}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n                {rows.map((row, i) => {\n                    prepareRow(row);\n                    return (\n                        <tr {...row.getRowProps()}>\n                            {row.cells.map(cell => {\n                                return <td {...cell.getCellProps()}>\n                                    {cell.render(\"Cell\")}\n                                </td>\n                            })}\n                        </tr>\n                    )\n                })}\n            </tbody>\n        </table>\n        </>\n    )\n\n}"]},"metadata":{},"sourceType":"module"}