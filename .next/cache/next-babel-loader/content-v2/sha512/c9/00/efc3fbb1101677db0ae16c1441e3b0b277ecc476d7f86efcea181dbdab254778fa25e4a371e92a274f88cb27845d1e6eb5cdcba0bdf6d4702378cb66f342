{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\ReactJS\\\\new-sioi\\\\components\\\\vendor\\\\Table.tsx\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from \"react\";\nimport { useTable, useFilters } from \"react-table\";\nimport styles from './Table.module.css';\nexport default function Table(_ref) {\n  _s();\n\n  var _this = this;\n\n  var columns = _ref.columns,\n      data = _ref.data;\n\n  var _useState = useState(\"\"),\n      filterInput = _useState[0],\n      setFilterInput = _useState[1];\n\n  var _useTable = useTable({\n    columns: columns,\n    data: data\n  }, useFilters // Adding the useFilters Hook to the table\n  ),\n      getTableProps = _useTable.getTableProps,\n      getTableBodyProps = _useTable.getTableBodyProps,\n      headerGroups = _useTable.headerGroups,\n      rows = _useTable.rows,\n      prepareRow = _useTable.prepareRow,\n      setFilter = _useTable.setFilter; // Update the state when input changes\n\n\n  var handleFilterChange = function handleFilterChange(e) {\n    var value = e.target.value || undefined;\n    setFilter(\"Company\", value); // Update the Company filter. Now our table will filter and show only the rows which have a matching value\n\n    setFilterInput(value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      value: filterInput,\n      onChange: handleFilterChange,\n      placeholder: \"Search...\",\n      className: styles.myinput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", _objectSpread(_objectSpread({\n      className: styles.mytable\n    }, getTableProps()), {}, {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map(function (headerGroup) {\n          return /*#__PURE__*/_jsxDEV(\"tr\", _objectSpread(_objectSpread({}, headerGroup.getHeaderGroupProps()), {}, {\n            children: headerGroup.headers.map(function (column) {\n              return /*#__PURE__*/_jsxDEV(\"th\", _objectSpread(_objectSpread({}, column.getHeaderProps()), {}, {\n                children: column.render(\"Header\")\n              }), void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 45,\n                columnNumber: 29\n              }, _this);\n            })\n          }), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 21\n          }, _this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", _objectSpread(_objectSpread({}, getTableBodyProps()), {}, {\n        children: rows.map(function (row, i) {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", _objectSpread(_objectSpread({}, row.getRowProps()), {}, {\n            children: row.cells.map(function (cell) {\n              return /*#__PURE__*/_jsxDEV(\"td\", _objectSpread(_objectSpread({}, cell.getCellProps()), {}, {\n                children: cell.render(\"Cell\")\n              }), void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 40\n              }, _this);\n            })\n          }), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 25\n          }, _this);\n        })\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this)]\n    }), void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Table, \"4EZgat5DkfZ8eq9oNu5yzxtlYbI=\", false, function () {\n  return [useTable];\n});\n\n_c = Table;\n\nvar _c;\n\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"sources":["D:/ReactJS/new-sioi/components/vendor/Table.tsx"],"names":["React","useState","useTable","useFilters","styles","Table","columns","data","filterInput","setFilterInput","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setFilter","handleFilterChange","e","value","target","undefined","myinput","mytable","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,aAArC;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AAEA,eAAe,SAASC,KAAT,OAAgC;AAAA;;AAAA;;AAAA,MAAhBC,OAAgB,QAAhBA,OAAgB;AAAA,MAAPC,IAAO,QAAPA,IAAO;;AAAA,kBAELN,QAAQ,CAAC,EAAD,CAFH;AAAA,MAEpCO,WAFoC;AAAA,MAEvBC,cAFuB;;AAAA,kBAWvCP,QAAQ,CACR;AACII,IAAAA,OAAO,EAAPA,OADJ;AAEIC,IAAAA,IAAI,EAAJA;AAFJ,GADQ,EAKRJ,UALQ,CAKG;AALH,GAX+B;AAAA,MAKvCO,aALuC,aAKvCA,aALuC;AAAA,MAMvCC,iBANuC,aAMvCA,iBANuC;AAAA,MAOvCC,YAPuC,aAOvCA,YAPuC;AAAA,MAQvCC,IARuC,aAQvCA,IARuC;AAAA,MASvCC,UATuC,aASvCA,UATuC;AAAA,MAUvCC,SAVuC,aAUvCA,SAVuC,EAmB3C;;;AACA,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,CAAC,EAAI;AAC5B,QAAMC,KAAK,GAAGD,CAAC,CAACE,MAAF,CAASD,KAAT,IAAkBE,SAAhC;AACAL,IAAAA,SAAS,CAAC,SAAD,EAAYG,KAAZ,CAAT,CAF4B,CAEC;;AAC7BT,IAAAA,cAAc,CAACS,KAAD,CAAd;AACH,GAJD;;AAMA,sBACI;AAAA,4BACA;AACI,MAAA,KAAK,EAAEV,WADX;AAEI,MAAA,QAAQ,EAAEQ,kBAFd;AAGI,MAAA,WAAW,EAAE,WAHjB;AAII,MAAA,SAAS,EAAEZ,MAAM,CAACiB;AAJtB;AAAA;AAAA;AAAA;AAAA,YADA,eAQA;AAAO,MAAA,SAAS,EAAEjB,MAAM,CAACkB;AAAzB,OAAsCZ,aAAa,EAAnD;AAAA,8BACI;AAAA,kBACKE,YAAY,CAACW,GAAb,CAAiB,UAAAC,WAAW;AAAA,8BACzB,8CAAQA,WAAW,CAACC,mBAAZ,EAAR;AAAA,sBACKD,WAAW,CAACE,OAAZ,CAAoBH,GAApB,CAAwB,UAAAI,MAAM;AAAA,kCAC3B,8CAAQA,MAAM,CAACC,cAAP,EAAR;AAAA,0BACKD,MAAM,CAACE,MAAP,CAAc,QAAd;AADL;AAAA;AAAA;AAAA;AAAA,uBAD2B;AAAA,aAA9B;AADL;AAAA;AAAA;AAAA;AAAA,mBADyB;AAAA,SAA5B;AADL;AAAA;AAAA;AAAA;AAAA,cADJ,eAYI,iDAAWlB,iBAAiB,EAA5B;AAAA,kBACKE,IAAI,CAACU,GAAL,CAAS,UAACO,GAAD,EAAMC,CAAN,EAAY;AAClBjB,UAAAA,UAAU,CAACgB,GAAD,CAAV;AACA,8BACI,8CAAQA,GAAG,CAACE,WAAJ,EAAR;AAAA,sBACKF,GAAG,CAACG,KAAJ,CAAUV,GAAV,CAAc,UAAAW,IAAI,EAAI;AACnB,kCAAO,8CAAQA,IAAI,CAACC,YAAL,EAAR;AAAA,0BACFD,IAAI,CAACL,MAAL,CAAY,MAAZ;AADE;AAAA;AAAA;AAAA;AAAA,uBAAP;AAGH,aAJA;AADL;AAAA;AAAA;AAAA;AAAA,mBADJ;AASH,SAXA;AADL;AAAA;AAAA;AAAA;AAAA,cAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,YARA;AAAA,kBADJ;AAuCH;;GAjEuBxB,K;UAWhBH,Q;;;KAXgBG,K","sourcesContent":["import React, {useState} from \"react\";\nimport { useTable, useFilters } from \"react-table\";\nimport styles from './Table.module.css'\n\nexport default function Table({columns, data}) {\n\n    const [filterInput, setFilterInput] = useState(\"\");\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n        setFilter // The useFilter Hook provides a way to set the filter\n    } = useTable(\n        {\n            columns, \n            data\n        },\n        useFilters // Adding the useFilters Hook to the table\n    );\n\n    // Update the state when input changes\n    const handleFilterChange = e => {\n        const value = e.target.value || undefined;\n        setFilter(\"Company\", value); // Update the Company filter. Now our table will filter and show only the rows which have a matching value\n        setFilterInput(value);\n    };\n\n    return (\n        <>\n        <input\n            value={filterInput}\n            onChange={handleFilterChange}\n            placeholder={\"Search...\"}\n            className={styles.myinput}\n        />\n\n        <table className={styles.mytable} {...getTableProps()}>\n            <thead>\n                {headerGroups.map(headerGroup => (\n                    <tr {...headerGroup.getHeaderGroupProps()}>\n                        {headerGroup.headers.map(column => (\n                            <th {...column.getHeaderProps()}>\n                                {column.render(\"Header\")}\n                            </th>\n                        ))}\n                    </tr>\n                ))}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n                {rows.map((row, i) => {\n                    prepareRow(row);\n                    return (\n                        <tr {...row.getRowProps()}>\n                            {row.cells.map(cell => {\n                                return <td {...cell.getCellProps()}>\n                                    {cell.render(\"Cell\")}\n                                </td>\n                            })}\n                        </tr>\n                    )\n                })}\n            </tbody>\n        </table>\n        </>\n    )\n\n}"]},"metadata":{},"sourceType":"module"}